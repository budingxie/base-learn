package array

import "fmt"

func State() {
	//申明数组 var name [length] type

	// 1.申明一个包含5个元素的整形数组
	var a1 [5]int

	// 2.申明一个包含5个元素的整形数组
	// 2.1用具体值初始化每个元素
	var a2 [5]int = [5]int{10, 20, 30, 40, 50}

	// 3.申明一个整形数组
	// 3.1使用具体值初始胡化每个元素
	// 3.2容量初始化值由元素数量决定
	a3 := [...]int{10, 20, 30, 40, 50}

	// 4.申明一个由5个元素的数组
	// 4.1使用具体值初始化1和2位置上的元素
	// 4.2其余位置为类型默认值
	// 4.3结果0,10,20,0,0
	a4 := [5]int{1: 10, 2: 20}

	fmt.Println(a1, a2, a3, a4)
}

func UseArray() {
	// 1.申明长度为5的数组
	// 1.1使用具体值为数组赋值
	a1 := [5]int{10, 20, 30, 40, 50}
	// 1.2修改位置为2的数组元素的值
	a1[2] = 35

	v := 2
	// 2.申明包含5个元素的数组，里面的元素指向整数
	// 2.1初始化数组中每个元素的指针的指向
	a2 := [5]*int{0: new(int), 1: new(int), 2: &v}
	// 2.2为索引0，1处位置的元素赋值
	*a2[0] = 10
	*a2[1] = 20

	/**
	------------------------------
	|  地址0  |  地址1  |  地址2  |
	|  指向   |  指向   |  指向   |
	------------------------------
	    |		  |			|
		|		  |			|
		10		  20		2
	*/

	var xx *[]int
	fmt.Printf("%T，%T", xx, a2)
}

func UseStrArr() {
	// 1.什么第一个包含5个元素的字符串数组
	var a1 [5]string

	// 2.申明第二个包含5个元素的字符串数组
	// 2.1用颜色初始化数组
	a2 := [5]string{"Red", "Blue", "Green", "Yellow", "Pink"}

	// 2.2把a2的值复制到a1
	// 复制之后，两个数组的值完全一样
	a1 = a2
	// 数组变量的类型：包括数组长度、每个元素的类型。只有这两部分都相同的数组，才是类型相同的数组，才能相互复制

	a2[0] = "dd"
	fmt.Printf("%v\n%v", a1, a2)
}

func AssignArr() {
	// 1.申明第一个包含4个元素的字符串数组
	//	var a1 [4]string

	// 2.申明第二个包含5个元素的字符串数组
	// 2.1使用颜色初始化数组
	//	a2 := [5] string{"Red", "Blue", "Green", "Yellow", "Pink"}

	// 3.将a2复制给a1
	//	a1 = a2
	//报错
	// compiler Error:
	// cannot use a2 (type [5]string) as type [4]string in assignment
}

func UsePoint() {
	// 1.申明第一个包含3个元素的指向字符串的指针数组
	var a1 [3]*string

	// 2.申明第二个包含3个元素的指向字符串的指针数组
	// 2.1使用字符串指针初始胡这个数组
	a2 := [3]*string{new(string), new(string), new(string)}

	// 3.使用颜色为每一个元素赋值
	*a2[0] = "Red"
	*a2[1] = "Blue"
	*a2[2] = "Green"

	// 4.将a2复制给a1
	a1 = a2
	fmt.Printf("%v,%v\n", a1, a2)

	// 5.修改任意数组中的值
	*a1[0] = "Yellow"
	fmt.Printf("a1[0]=%v, a2[0]=%v\n", *a1[0], *a2[0])
}
